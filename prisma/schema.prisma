// #region ----------- PRISMA SETTINGS -----------

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// #endregion

// #region ---------------- AUTH ----------------

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  Active
  Inactive
  Banned
  Suspended
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  lastName              String?
  email                 String?                @unique
  phone                 String?
  address               Json?
  notifications         Json?
  orders                Json?
  emails                Json?
  emailApp              Json?
  about                 String?
  emailVerified         DateTime?
  image                 String?
  password              String?
  status                UserStatus             @default(Active)
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Order                 Order[]
  RestockWish           RestockWish[]
  Review                Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// #endregion

// #region ---------------- BLOG ----------------
generator json {
  provider = "prisma-json-types-generator"
}

model Post {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  description     String
  content         String
  publish         Boolean
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]
  imageUrl        String
  tags            String[]

  postCategoryId String
  postCategory   PostCategory @relation("PostCategoryToPost", fields: [postCategoryId], references: [id])
  // viewCount Int     @default(0)
  // published Boolean @default(false)
  // author  User    @relation(fields: [name], references: [id])
  // name    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

model PostCategory {
  id    String @id @default(cuid())
  slug  String @unique
  name  String
  value String
  Post  Post[] @relation("PostCategoryToPost")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

// #endregion

// #region ---------------- SHOP ----------------
model Product {
  id            String            @id @default(cuid())
  slug          String            @unique
  name          String
  type          ProductType
  status        ProductStatus
  visibility    ProductVisibility
  featured      Boolean
  description   String?
  content       String?
  attributes    Json?
  images        Json?
  categoryId    String?
  subcategoryId String?
  variations    Json?
  shipping      Json?
  properties    Json?

  category    ProductCategory?    @relation(fields: [categoryId], references: [id])
  subcategory ProductSubCategory? @relation(fields: [subcategoryId], references: [id])
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@index([slug])
  @@map("products")
}

model ProductAttribute {
  id                   String                @id @default(cuid())
  slug                 String                @unique
  name                 String
  type                 AttributeTypes        @default(DEFAULT)
  productPageType      ProductPageType       @default(DEFAULT)
  filterPageType       FilterPageType        @default(DEFAULT)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  productSubAttributes ProductSubAttribute[]

  @@index([slug])
  @@map("productAttributes")
}

model ProductSubAttribute {
  id                 String           @id @default(cuid())
  slug               String           @unique
  name               String
  value              String
  productAttributeId String
  productAttribute   ProductAttribute @relation(fields: [productAttributeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@map("productSubAttributes")
}

model ProductCategory {
  id            String               @id @default(cuid())
  slug          String               @unique
  name          String
  imageUrl      String?
  description   String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  products      Product[]
  subcategories ProductSubCategory[]

  @@index([slug])
  @@map("productCategories")
}

model ProductSubCategory {
  id                String          @id @default(cuid())
  slug              String          @unique
  name              String
  imageUrl          String?
  description       String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  products          Product[]
  ProductCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId String

  @@index([slug])
}

model RestockWish {
  id       String   @id @default(cuid())
  product  Json
  email    String
  userId   String
  customer User     @relation(fields: [userId], references: [id])
  date     DateTime @default(now())
}

model Review {
  id       String  @id @default(cuid())
  name     String
  image    String?
  platform String
  rating   Int
  link     String?
  comment  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Coupon {
  id           String        @id @default(cuid())
  code         String        @unique
  discount     Float
  maxDiscount  Float?
  discountType DiscountTypes
  startDate    DateTime
  endDate      DateTime
  active       Boolean
  usageLimit   Int
  usageCount   Int           @default(0)
  createdAt    DateTime      @default(now())

  @@map("coupons")
}

model Mail {
  id         String   @id @default(cuid())
  image      String?
  name       String
  email      String
  subject    String
  message    String
  readStatus Boolean  @default(false)
  sent       Boolean  @default(false)
  draft      Boolean  @default(false)
  deleted    Boolean  @default(false)
  spam       Boolean  @default(false)
  important  Boolean  @default(false)
  starred    Boolean  @default(false)
  archived   Boolean  @default(false)
  date       DateTime @default(now())
}

enum DiscountTypes {
  Percentage
  FixedValue
}

enum AttributeTypes {
  DEFAULT
  COLOR

  @@map("AttributeTypes")
}

enum ProductPageType {
  DEFAULT
  COLOR
  SELECT
  CHECKBOX
  RATIO
}

enum FilterPageType {
  DEFAULT
  COLOR
  SELECT
  CHECKBOX
  RATIO
}

enum ProductType {
  SIMPLE
  VARIABLE
}

enum ProductStatus {
  PUBLISHED
  ARCHIVED
}

enum ProductVisibility {
  PUBLIC
  PRIVATE
}

// #endregion

// #region ---------------- PAYMENT ----------------

model CartProduct {
  id            String   @id @default(cuid())
  productId     String
  variationId   String
  subAttributes String
  name          String
  image         String
  quantity      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  cartId String?
  Cart   Cart?   @relation(fields: [cartId], references: [id])
}

model Cart {
  id       String        @id @default(cuid())
  products CartProduct[]
  amount   Float

  @@map("cart")
}

model Order {
  id               String          @id @default(cuid())
  order            Int             @unique @default(autoincrement())
  userId           String?
  customer         User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  items            Json?
  address          Json?
  paymentDetails   Json?
  amount           Json?
  phone            String?
  clientInfo       Json?
  status           OrderStatus     @default(Pending)
  transitionStatus TransitonStatus
  createdAt        DateTime        @default(now())
}

enum OrderStatus {
  Pending
  BeingProcessed
  Shipped
  InTransit
  Completed
  OnHold
  AwaitingValidation
  BeingRefunded
  Refunded
  Cancelled
}

enum TransitonStatus {
  Pending
  Completed
}

// #endregion

// #region ---------------- TOOLS ----------------

model FormData {
  id        String   @id @default(cuid())
  data      Json
  createdAt DateTime @default(now())
}

// #endregion
